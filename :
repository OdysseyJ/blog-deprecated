---
title: 파이썬 코딩의 기술 - 함수
date: 2022/1/9
description: study and note effective python 2nd edition - functions
tag: Dev
author: Aaron
---

# 파이썬 코딩의 기술 - 함수

## 함수

### 함수가 여러 값을 반환하는 경우 절대로 네 값 이상을 언패킹하지 말라.

- 너무 많은 값의 언패킹은 순서를 혼동하게 만들어 실수를 유발한다.
    ```
    minimum, maximum, average, median, count = get_stats(lengths)
    ```

- 4개 이상 사용하는 구문에 관해서는 경량 클래스나, namedtuple을 사용하고 함수가 이런
  값을 반환하게끔 하는것이 더 낫다.

### None을 반환하기보다는 예외를 발생시켜라

- None을 반환하는 코드는 실수를 발생시킨다.
    ```
    def careful_divide(a, b):
        try:
            return a/b
        except ZeroDivisionError:
            return None

    x, y = 1, 0
    result = careful_divide(x, y)
    if result is None:
        print("잘못된 입력")

    # 만약 False취급 검사를 했을 경우
    x, y = 0, 5
    result = careful_divide(x, y)
    if not result:
        print("잘못된 입력")

    기대값 : 0 (0을 5로 나누어도 0이다.)
    실제값 : "잘못된 입력"
    ```

- Exception을 던져라, docstring과 annotation을 작성해라
    ```
    def careful_divide(a: float, b: float):
        """a를 b로 나눈다.

        Raises:
            ValueError: b가 0이어서 나눗셈을 할 수 없을 때
        """
        try:
            return a / b
        except ZeroDivisionError as e:
            raise ValueError("잘못된 입력")

    # 호출자는 더이상 조건문을 사용하지 않는다.

    x, y = 5, 2
    try:
        result = careful_divide(x, y)
    except ValueError:
        print("잘못된 입력")
    else:
        print(f"{result}")
    ```

### 변수 영역과 클로저의 상호작용 방식을 이해하라
- 파이썬은 아래와 같은 특징이 있다.
    - 파이썬의 클로저 : 자신이 정의된 영역밖의 변수를 접근할 수 있는것.
    - 파이썬에서는 함수가 일급 시민 객체다.
    - 일급 시민 객체는
      1. 직접 가리킬 수 있다.
      2. 변수에 대입하거나 다른 함수에 인자로 전달 할 수 있다.
      3. 식이나 if문에서 함수를 비교하거나 함수에서 반환하는것 등이 가능하다.
    - 시퀀스(튜플 포함)을 비교하는 구체적 규칙이 있다. 작은 인덱스부터 차례대로
      비교한다.
- 식 안에서 변수를 참조할 때, 파이썬 인터프리터는 아래의 방식으로 동작한다. 만약 해당
  4가지 영역에 변수가 없을 경우 NameError를 발생시킨다.
    1. 해당 함수의 영역
    2. 현재 함수를 둘러싼 영역(현재 함수를 둘러싸고 있는 함수 등)
    3. 현재 코드가 들어 있는 모듈의 영역(전역 영역(global scope)이라고도 부른다.)
    4. 내장 영역(built-in scope)
    ```

    ```
